{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the BIPES Moving Rainbow Website! About the BIPES Moving Rainbow Project Moving Rainbow is a way to learn the basics of programming using LED strips. We use low-cost components so you can build entire projects and costumes with 100s of LEDs for under $20. Since 2014 we have been building low-cost kits that teach all the concepts of Computational Thinking ](https://www.coderdojotc.org/CoderDojoTC/computational-thinking/). Raspberry Pi Pico The Raspberry Pi Pico cost only $4 and runs Python. All our labs use this processor. Breadboards In our projects we use 1/2 sized breadboard with 400 tie points. Programming the LED strip with BIPES We'll use BIPES to control the Raspberry Pi Pico and an 8 pixel LED strip. The strip is initialized by selecting the Init NeoPixel Block from the Displays navigation/NeoPixel LED Strip sub menu. We'll initialize the block to use GPIO0 as our data pin and we have 8 LEDs in our strip Note All the blocks in these lessons can be downloaded from the git repo where this site is hosted. Once the xml files are downloaded, you can upload them in BIPES!","title":"Moving Rainbow Home"},{"location":"#welcome-to-the-bipes-moving-rainbow-website","text":"","title":"Welcome to the BIPES Moving Rainbow Website!"},{"location":"#about-the-bipes-moving-rainbow-project","text":"Moving Rainbow is a way to learn the basics of programming using LED strips. We use low-cost components so you can build entire projects and costumes with 100s of LEDs for under $20. Since 2014 we have been building low-cost kits that teach all the concepts of Computational Thinking ](https://www.coderdojotc.org/CoderDojoTC/computational-thinking/).","title":"About the BIPES Moving Rainbow Project"},{"location":"#raspberry-pi-pico","text":"The Raspberry Pi Pico cost only $4 and runs Python. All our labs use this processor.","title":"Raspberry Pi Pico"},{"location":"#breadboards","text":"In our projects we use 1/2 sized breadboard with 400 tie points.","title":"Breadboards"},{"location":"#programming-the-led-strip-with-bipes","text":"We'll use BIPES to control the Raspberry Pi Pico and an 8 pixel LED strip. The strip is initialized by selecting the Init NeoPixel Block from the Displays navigation/NeoPixel LED Strip sub menu. We'll initialize the block to use GPIO0 as our data pin and we have 8 LEDs in our strip Note All the blocks in these lessons can be downloaded from the git repo where this site is hosted. Once the xml files are downloaded, you can upload them in BIPES!","title":"Programming the LED strip with BIPES"},{"location":"lessons/","text":"Moving Rainbow Lessons Simple Individual Patterns Blink - blink the first pixel red on and off Fade In and Out - Make the first pixel fade in and out Heartbeat - Change the first red pixel to beat like a heartbeat Red, Green and Blue - Draw red, green and blue colors in different places Color Wheel - draw all the colors of the rainbow A Better Dimmer - making our dimmer more uniform Moving Pixel - move a pixel up and down the LED strip Color Wipe - change the color one pixel at a time Bounce - dots crash in the center of the strip Comet - make a block of color move with a dimming tail Moving Rainbow - move a block of colors Rainbow Cycle - cycle every pixel through all the colors of the rainbow Larson Scanner - famous Cylon eye and KITT car scanning pattern Random Colors - draw random colors at each pixel Twinkle - random pixels twinkle on for a brief second Ripple - simulated drops in a pond in 1-D Random Bounce - random points bounce around Candle - simulated candle flickers with randomness Theater Chase - classic running light patterns popular in signs Moving Bands - moving bands of color Rotating Patterns Modes - assign a mode to each pattern Button Modes - use buttons to change a mode","title":"List of Lessons"},{"location":"lessons/#moving-rainbow-lessons","text":"","title":"Moving Rainbow Lessons"},{"location":"lessons/#simple-individual-patterns","text":"Blink - blink the first pixel red on and off Fade In and Out - Make the first pixel fade in and out Heartbeat - Change the first red pixel to beat like a heartbeat Red, Green and Blue - Draw red, green and blue colors in different places Color Wheel - draw all the colors of the rainbow A Better Dimmer - making our dimmer more uniform Moving Pixel - move a pixel up and down the LED strip Color Wipe - change the color one pixel at a time Bounce - dots crash in the center of the strip Comet - make a block of color move with a dimming tail Moving Rainbow - move a block of colors Rainbow Cycle - cycle every pixel through all the colors of the rainbow Larson Scanner - famous Cylon eye and KITT car scanning pattern Random Colors - draw random colors at each pixel Twinkle - random pixels twinkle on for a brief second Ripple - simulated drops in a pond in 1-D Random Bounce - random points bounce around Candle - simulated candle flickers with randomness Theater Chase - classic running light patterns popular in signs Moving Bands - moving bands of color","title":"Simple Individual Patterns"},{"location":"lessons/#rotating-patterns","text":"Modes - assign a mode to each pattern Button Modes - use buttons to change a mode","title":"Rotating Patterns"},{"location":"lessons/01-blink/","text":"Blink Here is one of simplest moving rainbow programs. It is our version of \"Hello World!. Our first program will just blink the first pixel on and off every 1/2 second. Exercises Change the Color Lab Change the block: to be: What happens? Change the Position Lab Change the block: to be: What happens? Change the Sleep Time What happens if you change the sleep time? to be: What is the smallest time you can use and still see flashing? Hint: Try values like .05, or .005 RGB Lab Change the single red block to and change the single black block to What happened? Why Do We Need block Write NeoPixel? Try to remove one of the block that does Write NeoPixel. What happens? Why do you think we need this block? LED Strip State What happens if you stop the program when the LED strip LEDs are on? On Your Own What if you extended the lab to more positions and colors?","title":"Blink"},{"location":"lessons/01-blink/#blink","text":"Here is one of simplest moving rainbow programs. It is our version of \"Hello World!. Our first program will just blink the first pixel on and off every 1/2 second.","title":"Blink"},{"location":"lessons/01-blink/#exercises","text":"","title":"Exercises"},{"location":"lessons/01-blink/#change-the-color-lab","text":"Change the block: to be: What happens?","title":"Change the Color Lab"},{"location":"lessons/01-blink/#change-the-position-lab","text":"Change the block: to be: What happens?","title":"Change the Position Lab"},{"location":"lessons/01-blink/#change-the-sleep-time","text":"What happens if you change the sleep time? to be: What is the smallest time you can use and still see flashing? Hint: Try values like .05, or .005","title":"Change the Sleep Time"},{"location":"lessons/01-blink/#rgb-lab","text":"Change the single red block to and change the single black block to What happened?","title":"RGB Lab"},{"location":"lessons/01-blink/#why-do-we-need-block-write-neopixel","text":"Try to remove one of the block that does Write NeoPixel. What happens? Why do you think we need this block?","title":"Why Do We Need block Write NeoPixel?"},{"location":"lessons/01-blink/#led-strip-state","text":"What happens if you stop the program when the LED strip LEDs are on?","title":"LED Strip State"},{"location":"lessons/01-blink/#on-your-own","text":"What if you extended the lab to more positions and colors?","title":"On Your Own"},{"location":"lessons/02-fade-in-and-out/","text":"Fade In and Out Lab What if instead of the first LED just turning on and off we want to slowly make the LED get brighter and then slowly dimmer? To do this we will change the brightness of the red from off (0) to fully on (255) in steps with a small delay of 1/100th of a second between the steps. ]","title":"Fade In and Out"},{"location":"lessons/02-fade-in-and-out/#fade-in-and-out-lab","text":"What if instead of the first LED just turning on and off we want to slowly make the LED get brighter and then slowly dimmer? To do this we will change the brightness of the red from off (0) to fully on (255) in steps with a small delay of 1/100th of a second between the steps. ]","title":"Fade In and Out Lab"},{"location":"lessons/03-heartbeat/","text":"Heartbeat Lab What if you were building a robot and you wanted to flash the LED to look like a human heartbeat? Instead of slowing fading in and out, you would want the brightness to follow the electrical signals coming from the heart. This is called an elecrto cardiogram (EKG) and it look like this: Notice that the signal is low for about one second and then it spikes up to maximum brightness and then comes back down. When we are moving the brightness up and down, we don't have to pause between each of the 256 brightness values. The eye can't usually see the intermediate brightness values if the brightness is changing quickly. To make our code efficient we can skip over 9 out of 10 of the brightness gradations between 0 and 255. The following blocks emulates this heart beat pattern:","title":"Heartbeat"},{"location":"lessons/03-heartbeat/#heartbeat-lab","text":"What if you were building a robot and you wanted to flash the LED to look like a human heartbeat? Instead of slowing fading in and out, you would want the brightness to follow the electrical signals coming from the heart. This is called an elecrto cardiogram (EKG) and it look like this: Notice that the signal is low for about one second and then it spikes up to maximum brightness and then comes back down. When we are moving the brightness up and down, we don't have to pause between each of the 256 brightness values. The eye can't usually see the intermediate brightness values if the brightness is changing quickly. To make our code efficient we can skip over 9 out of 10 of the brightness gradations between 0 and 255. The following blocks emulates this heart beat pattern:","title":"Heartbeat Lab"},{"location":"lessons/04-red-green-blue/","text":"Red, Green and Blue In this lesson, we will draw three different colors at three different locations on the LED strip. We will then repeat this pattern down the strip. Our first task is to draw the red, green and blue in the first three pixels of the LED strip. Our blocks will be the following Full Set of Blocks (adding the NeoPixel Init) Repeating the Pattern Now, let's repeat this pattern over the entire strip. We can do this by wrapping the three lines in a loop like this: Note here that the loop block has a third parameter that tells us how many to skip in each iteration of the loop. Since we have three colors, we can skip every three values of i. I will get values of 1, 4, 7. Our Pixel Strip starts at 0 as the first LED, so we have to subtract 1 from i to get the first LED to light. I also have to check to make sure I don't try to turn on an LED past the end of the strip.","title":"Red, Green and Blue"},{"location":"lessons/04-red-green-blue/#red-green-and-blue","text":"In this lesson, we will draw three different colors at three different locations on the LED strip. We will then repeat this pattern down the strip. Our first task is to draw the red, green and blue in the first three pixels of the LED strip. Our blocks will be the following","title":"Red, Green and Blue"},{"location":"lessons/04-red-green-blue/#full-set-of-blocks-adding-the-neopixel-init","text":"","title":"Full Set of Blocks (adding the NeoPixel Init)"},{"location":"lessons/04-red-green-blue/#repeating-the-pattern","text":"Now, let's repeat this pattern over the entire strip. We can do this by wrapping the three lines in a loop like this: Note here that the loop block has a third parameter that tells us how many to skip in each iteration of the loop. Since we have three colors, we can skip every three values of i. I will get values of 1, 4, 7. Our Pixel Strip starts at 0 as the first LED, so we have to subtract 1 from i to get the first LED to light. I also have to check to make sure I don't try to turn on an LED past the end of the strip.","title":"Repeating the Pattern"},{"location":"lessons/05-color-wheel/","text":"Color Wheel Lab What if we wanted to slowly vary the color of one of our pixels through all the colors of the rainbow? What we would like is a function that would take in an number from 0 to 255 and walk around the color wheel as you change the input value. This is known as the wheel function: If you follow the logic, you will see that the colors range from red through green and to blue and back to red: wheel(1) = (255, 0, 0) # red wheel(85) = (0,255, 0) # green wheel(170) = (0, 0, 255) # blue wheel(255) = (255, 0, 0) # red Full Program This set of blocks will call the wheel function in the set of blocks above continuously","title":"Color Wheel"},{"location":"lessons/05-color-wheel/#color-wheel-lab","text":"What if we wanted to slowly vary the color of one of our pixels through all the colors of the rainbow? What we would like is a function that would take in an number from 0 to 255 and walk around the color wheel as you change the input value. This is known as the wheel function: If you follow the logic, you will see that the colors range from red through green and to blue and back to red: wheel(1) = (255, 0, 0) # red wheel(85) = (0,255, 0) # green wheel(170) = (0, 0, 255) # blue wheel(255) = (255, 0, 0) # red","title":"Color Wheel Lab"},{"location":"lessons/05-color-wheel/#full-program","text":"This set of blocks will call the wheel function in the set of blocks above continuously","title":"Full Program"},{"location":"lessons/06-linear-dimmer/","text":"Linear Dimmer We can dim a single LED by using PWM or we can dim a NeoPixel by sending it a value from 0 to 255 for the brightness. https://docs.micropython.org/en/latest/pyboard/tutorial/fading_led.html Gamma Correction Table 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 9 , 9 , 9 , 10 , 10 , 10 , 11 , 11 , 11 , 12 , 12 , 13 , 13 , 13 , 14 , 14 , 15 , 15 , 16 , 16 , 17 , 17 , 18 , 18 , 19 , 19 , 20 , 20 , 21 , 21 , 22 , 22 , 23 , 24 , 24 , 25 , 25 , 26 , 27 , 27 , 28 , 29 , 29 , 30 , 31 , 32 , 32 , 33 , 34 , 35 , 35 , 36 , 37 , 38 , 39 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 50 , 51 , 52 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 66 , 67 , 68 , 69 , 70 , 72 , 73 , 74 , 75 , 77 , 78 , 79 , 81 , 82 , 83 , 85 , 86 , 87 , 89 , 90 , 92 , 93 , 95 , 96 , 98 , 99 , 101 , 102 , 104 , 105 , 107 , 109 , 110 , 112 , 114 , 115 , 117 , 119 , 120 , 122 , 124 , 126 , 127 , 129 , 131 , 133 , 135 , 137 , 138 , 140 , 142 , 144 , 146 , 148 , 150 , 152 , 154 , 156 , 158 , 160 , 162 , 164 , 167 , 169 , 171 , 173 , 175 , 177 , 180 , 182 , 184 , 186 , 189 , 191 , 193 , 196 , 198 , 200 , 203 , 205 , 208 , 210 , 213 , 215 , 218 , 220 , 223 , 225 , 228 , 231 , 233 , 236 , 239 , 241 , 244 , 247 , 249 , 252 , 255 We'll copy the Gamma Correction Table into a list and use it with a function to build a better dimmer in the blocks below","title":"A Better Dimmer"},{"location":"lessons/06-linear-dimmer/#linear-dimmer","text":"We can dim a single LED by using PWM or we can dim a NeoPixel by sending it a value from 0 to 255 for the brightness. https://docs.micropython.org/en/latest/pyboard/tutorial/fading_led.html","title":"Linear Dimmer"},{"location":"lessons/06-linear-dimmer/#gamma-correction-table","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 9 , 9 , 9 , 10 , 10 , 10 , 11 , 11 , 11 , 12 , 12 , 13 , 13 , 13 , 14 , 14 , 15 , 15 , 16 , 16 , 17 , 17 , 18 , 18 , 19 , 19 , 20 , 20 , 21 , 21 , 22 , 22 , 23 , 24 , 24 , 25 , 25 , 26 , 27 , 27 , 28 , 29 , 29 , 30 , 31 , 32 , 32 , 33 , 34 , 35 , 35 , 36 , 37 , 38 , 39 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 50 , 51 , 52 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 66 , 67 , 68 , 69 , 70 , 72 , 73 , 74 , 75 , 77 , 78 , 79 , 81 , 82 , 83 , 85 , 86 , 87 , 89 , 90 , 92 , 93 , 95 , 96 , 98 , 99 , 101 , 102 , 104 , 105 , 107 , 109 , 110 , 112 , 114 , 115 , 117 , 119 , 120 , 122 , 124 , 126 , 127 , 129 , 131 , 133 , 135 , 137 , 138 , 140 , 142 , 144 , 146 , 148 , 150 , 152 , 154 , 156 , 158 , 160 , 162 , 164 , 167 , 169 , 171 , 173 , 175 , 177 , 180 , 182 , 184 , 186 , 189 , 191 , 193 , 196 , 198 , 200 , 203 , 205 , 208 , 210 , 213 , 215 , 218 , 220 , 223 , 225 , 228 , 231 , 233 , 236 , 239 , 241 , 244 , 247 , 249 , 252 , 255 We'll copy the Gamma Correction Table into a list and use it with a function to build a better dimmer in the blocks below","title":"Gamma Correction Table"},{"location":"lessons/07-motion/","text":"Motion Turning individual pixels on and off is pretty easy. But the results can be pretty boring after a while. But don't worry, we can now create a program that is a lot more fun! This program uses the loop block. It uses a counter to turn on successive pixels in the strip. For each pixel it turn it on, delays for a short period of time, and then turns it off. It then moves on to the next pixel until each pixel is the strip has been turned on for short period. Move a Red Pixel The following set of blocks illustrates this process. You will note that this program is similar to the blink lab with a few key differences: The code that turns the pixel on and off is inside the for loop. There is no delay or write after we turn it off. You could add these back in, but they are not really needed. Note that the delary time in this program is stored in the delay variable and it is a pretty short delay. The shorter the delay, the faster the pixel will appear to move. Experiments Change the Delay Try to change the delay variable to different values. Note how slow the pixel moves if you make the delay a full second. This is pretty boring. Change the delay to be .01. This is 1/100th of a second. What is the fastest you can make the pixel move? What happens if you make the delay less than .001 . Can you still notice the change in the speed? Many people can't tell the difference because the time to execute the Write NeoPixel block is much longer than the delay. Down and Back Next, lets try to make the pixel appear to move down the LED strip and then back up. We call this the \"Down and Back\" pattern. To do this we just need to duplicate the for loop, but change the range of the index. Instead of going from 0 to NUMBER_PIXELS - 1, we will start at NUMBER_PIXELS - 1 and then go backwards each step: Try to change the color of the pixel. Try to change the direction of motion from the last to the beginning pixel.","title":"Moving Pixel"},{"location":"lessons/07-motion/#motion","text":"Turning individual pixels on and off is pretty easy. But the results can be pretty boring after a while. But don't worry, we can now create a program that is a lot more fun! This program uses the loop block. It uses a counter to turn on successive pixels in the strip. For each pixel it turn it on, delays for a short period of time, and then turns it off. It then moves on to the next pixel until each pixel is the strip has been turned on for short period.","title":"Motion"},{"location":"lessons/07-motion/#move-a-red-pixel","text":"The following set of blocks illustrates this process. You will note that this program is similar to the blink lab with a few key differences: The code that turns the pixel on and off is inside the for loop. There is no delay or write after we turn it off. You could add these back in, but they are not really needed. Note that the delary time in this program is stored in the delay variable and it is a pretty short delay. The shorter the delay, the faster the pixel will appear to move.","title":"Move a Red Pixel"},{"location":"lessons/07-motion/#experiments","text":"","title":"Experiments"},{"location":"lessons/07-motion/#change-the-delay","text":"Try to change the delay variable to different values. Note how slow the pixel moves if you make the delay a full second. This is pretty boring. Change the delay to be .01. This is 1/100th of a second. What is the fastest you can make the pixel move? What happens if you make the delay less than .001 . Can you still notice the change in the speed? Many people can't tell the difference because the time to execute the Write NeoPixel block is much longer than the delay.","title":"Change the Delay"},{"location":"lessons/07-motion/#down-and-back","text":"Next, lets try to make the pixel appear to move down the LED strip and then back up. We call this the \"Down and Back\" pattern. To do this we just need to duplicate the for loop, but change the range of the index. Instead of going from 0 to NUMBER_PIXELS - 1, we will start at NUMBER_PIXELS - 1 and then go backwards each step: Try to change the color of the pixel. Try to change the direction of motion from the last to the beginning pixel.","title":"Down and Back"},{"location":"lessons/08-color-wipe/","text":"Color Wipe This lesson shows you how to change the color of the entire LED strip pixel by pixel. There will be two delays that we can control: the delay between each pixel update - this is usually about 1/20th of a second the delay between colors - this is usually about 1 to 2 seconds A Simple Color Wipe Function To write this program, we will create a simple Python function that will cycle through all the colors in a list. Our color list will look like this: Our Color Wipe set of blocks will take the list of colors and set each LED to one color at a time, delaying delay seconds between setting each LED and colorDelay seconds before transitioning to the next color in our list. Finally, the main set of blocks calls the colorWipe set of blocks in an endless loop.","title":"Color Wipe"},{"location":"lessons/08-color-wipe/#color-wipe","text":"This lesson shows you how to change the color of the entire LED strip pixel by pixel. There will be two delays that we can control: the delay between each pixel update - this is usually about 1/20th of a second the delay between colors - this is usually about 1 to 2 seconds","title":"Color Wipe"},{"location":"lessons/08-color-wipe/#a-simple-color-wipe-function","text":"To write this program, we will create a simple Python function that will cycle through all the colors in a list. Our color list will look like this: Our Color Wipe set of blocks will take the list of colors and set each LED to one color at a time, delaying delay seconds between setting each LED and colorDelay seconds before transitioning to the next color in our list. Finally, the main set of blocks calls the colorWipe set of blocks in an endless loop.","title":"A Simple Color Wipe Function"},{"location":"lessons/08-moving-bands/","text":"Moving Bands of Color In this lesson, we will create a program that will move a set of bands of color down the LED strip. To do this we will create a function called drawBand(start, end, color) that will fill a range of pixels with a given color. We can then draw three \"bands\" of color like this: We can make this group of bands appear to move by adding a offset to the start like this: This will work fine until the value of i plus the offset exceeds the length of the LED strip. To get around this, we should never write to location i by itself. We should always divide i by the strip lenght and write to the remainder, what is call modulo and it is implemented as the remainder block. We just have to change one line in the drawBand function:","title":"Moving Bands"},{"location":"lessons/08-moving-bands/#moving-bands-of-color","text":"In this lesson, we will create a program that will move a set of bands of color down the LED strip. To do this we will create a function called drawBand(start, end, color) that will fill a range of pixels with a given color. We can then draw three \"bands\" of color like this: We can make this group of bands appear to move by adding a offset to the start like this: This will work fine until the value of i plus the offset exceeds the length of the LED strip. To get around this, we should never write to location i by itself. We should always divide i by the strip lenght and write to the remainder, what is call modulo and it is implemented as the remainder block. We just have to change one line in the drawBand function:","title":"Moving Bands of Color"},{"location":"lessons/09-comet-tail/","text":"Comet Tail In this lesson we will make a pattern of light like a comet tail. The comet will consist of about 5 to 10 pixels in a row and move across the strip by shifting the offset by a single pixel and then redrawing the comet. Setting The Brightness Our first task is to draw a single comet tail that will make the head of the comet bright (225) and slowly decrease the brightness behind the head of the comet. In general, each pixel will be half as bright and the prior pixel. The \"levels\" of brightness can be stored in a list. Our list will look like this: The Draw Comet Tail Function Our function will have five parameters: The offset from pixel 0 The color to draw the pixel as a tuple of three integers The delay between the draws which will control the speed that the comet appears to move down the strip Number of LEDs in the strip Number of brighness levels in our list Here is an example of this function: The most complex line is this one: This line sets the RGB values of the target. It must take the color values that are passed in as parameters and scale them for the current brightness of the tail of the comet. After it does the multiplication, it must use the int block to round the value to the nearest integer. Breaking Apart a Color into RGB (Red, Green, Blue) Values Since BIPES does not have the ability to break apart the color parameter into seperate RGB values, we have to rely on the Run Python Code block to do the work for us. The Run Python Code block allows us to run Python commands as if they were a block. In this case, we embed the block inside a function call and let it do the work for us, returning a list that we can use above. Main Blocks The main set of blocks sets up our color and brightness lists, initializes our NeoPixel strip, then calls the function to draw the comet","title":"Comet Tail"},{"location":"lessons/09-comet-tail/#comet-tail","text":"In this lesson we will make a pattern of light like a comet tail. The comet will consist of about 5 to 10 pixels in a row and move across the strip by shifting the offset by a single pixel and then redrawing the comet.","title":"Comet Tail"},{"location":"lessons/09-comet-tail/#setting-the-brightness","text":"Our first task is to draw a single comet tail that will make the head of the comet bright (225) and slowly decrease the brightness behind the head of the comet. In general, each pixel will be half as bright and the prior pixel. The \"levels\" of brightness can be stored in a list. Our list will look like this:","title":"Setting The Brightness"},{"location":"lessons/09-comet-tail/#the-draw-comet-tail-function","text":"Our function will have five parameters: The offset from pixel 0 The color to draw the pixel as a tuple of three integers The delay between the draws which will control the speed that the comet appears to move down the strip Number of LEDs in the strip Number of brighness levels in our list Here is an example of this function: The most complex line is this one: This line sets the RGB values of the target. It must take the color values that are passed in as parameters and scale them for the current brightness of the tail of the comet. After it does the multiplication, it must use the int block to round the value to the nearest integer.","title":"The Draw Comet Tail Function"},{"location":"lessons/09-comet-tail/#breaking-apart-a-color-into-rgb-red-green-blue-values","text":"Since BIPES does not have the ability to break apart the color parameter into seperate RGB values, we have to rely on the Run Python Code block to do the work for us. The Run Python Code block allows us to run Python commands as if they were a block. In this case, we embed the block inside a function call and let it do the work for us, returning a list that we can use above.","title":"Breaking Apart a Color into RGB (Red, Green, Blue) Values"},{"location":"lessons/09-comet-tail/#main-blocks","text":"The main set of blocks sets up our color and brightness lists, initializes our NeoPixel strip, then calls the function to draw the comet","title":"Main Blocks"},{"location":"lessons/10-moving-rainbow/","text":"Moving Rainbow In this lesson we will combine the work we did with the color wheel with the motion lesson to create a new lab that moves a block of different colors over the LED strip. This lab is a little tricker because we need to pay careful attention to our work at the beginning and end of the LED strip to avoid setting values outside the valid indexes of our strip. We will begin with drawing a static hand-built list of colors on our strip. We call this doing it \"the hard way\". After that we will show you have to create more a more flexible version using the color wheel function that we covered in a previous lab. The Classic Rainbow Let's begin by simply creating a named list of colors in a rainbow: red, orange, yellow, green, blue, indigo and violet. We can lookup the red, green and blue values of these colors on Wikipedia . Color Red, Green, and Blue Red 255,0,0 Orange 255,165,0 Yellow 255,255,0 Green 0,255,0 Blue 0,0,255 Indigo 75,0,130 Violet 238,130,238 We can then put the colors into a list: Draw the Rainbow We can then draw these colors in each of the first seven pixels like this: Move the Rainbow We can then \"move\" this pattern down the strip until we reach the end by redrawing it over and over and erasing it in between. There are a few tricky adjustments we had to make: We added the index counter to the strip index so that we would start drawing at a different point each time. We had to not go to the end of the LED strip. We had to stop num_colors + 1 before the end of the strip. We had to erase the current pixel after we drew the colors Repeating the Moving Rainbow Finally, we can wrap this entire section in a repeat while true block that will keep running the pattern over and over. Note that we had to add a few extra blocks to make the final draw get removed after the last draw in the outer loop. Improving on the Moving Rainbow This program is simple to read, but there are several ways we could improve it. One of the awkward characteristics of the program is that he rainbow pattern just suddenly \"appears\" at the front of the strip and then \"disappears\" at the end of the strip. This is OK for a strip in a line, but if you wrap the strip in a circle it looks odd. For a circular loop we would like the pattern to appear one pixel at a time and then appear to slide from the end to the beginning of the strip. We can achieve this by using the modulo function. It will take a counter and find the \"remainder\" after we divide it by the number of pixels in the strip. What if we wanted our rainbow to be a different number of pixels? It would be ideal of we could just write a function that would draw the right pixels at the right place. Perhaps we could just add a parameter to that function for the number of pixels in our rainbow?","title":"Moving Rainbow"},{"location":"lessons/10-moving-rainbow/#moving-rainbow","text":"In this lesson we will combine the work we did with the color wheel with the motion lesson to create a new lab that moves a block of different colors over the LED strip. This lab is a little tricker because we need to pay careful attention to our work at the beginning and end of the LED strip to avoid setting values outside the valid indexes of our strip. We will begin with drawing a static hand-built list of colors on our strip. We call this doing it \"the hard way\". After that we will show you have to create more a more flexible version using the color wheel function that we covered in a previous lab.","title":"Moving Rainbow"},{"location":"lessons/10-moving-rainbow/#the-classic-rainbow","text":"Let's begin by simply creating a named list of colors in a rainbow: red, orange, yellow, green, blue, indigo and violet. We can lookup the red, green and blue values of these colors on Wikipedia . Color Red, Green, and Blue Red 255,0,0 Orange 255,165,0 Yellow 255,255,0 Green 0,255,0 Blue 0,0,255 Indigo 75,0,130 Violet 238,130,238 We can then put the colors into a list:","title":"The Classic Rainbow"},{"location":"lessons/10-moving-rainbow/#draw-the-rainbow","text":"We can then draw these colors in each of the first seven pixels like this:","title":"Draw the Rainbow"},{"location":"lessons/10-moving-rainbow/#move-the-rainbow","text":"We can then \"move\" this pattern down the strip until we reach the end by redrawing it over and over and erasing it in between. There are a few tricky adjustments we had to make: We added the index counter to the strip index so that we would start drawing at a different point each time. We had to not go to the end of the LED strip. We had to stop num_colors + 1 before the end of the strip. We had to erase the current pixel after we drew the colors","title":"Move the Rainbow"},{"location":"lessons/10-moving-rainbow/#repeating-the-moving-rainbow","text":"Finally, we can wrap this entire section in a repeat while true block that will keep running the pattern over and over. Note that we had to add a few extra blocks to make the final draw get removed after the last draw in the outer loop.","title":"Repeating the Moving Rainbow"},{"location":"lessons/10-moving-rainbow/#improving-on-the-moving-rainbow","text":"This program is simple to read, but there are several ways we could improve it. One of the awkward characteristics of the program is that he rainbow pattern just suddenly \"appears\" at the front of the strip and then \"disappears\" at the end of the strip. This is OK for a strip in a line, but if you wrap the strip in a circle it looks odd. For a circular loop we would like the pattern to appear one pixel at a time and then appear to slide from the end to the beginning of the strip. We can achieve this by using the modulo function. It will take a counter and find the \"remainder\" after we divide it by the number of pixels in the strip. What if we wanted our rainbow to be a different number of pixels? It would be ideal of we could just write a function that would draw the right pixels at the right place. Perhaps we could just add a parameter to that function for the number of pixels in our rainbow?","title":"Improving on the Moving Rainbow"},{"location":"lessons/11-rainbow-cycle/","text":"Rainbow Cycle In this lesson we will use the wheel function to slowly cycle each pixel in a range through each of the colors of the rainbow. The Rainbow Cycle Function We create a function called rainbow_cycle() that has four parameters. The first is a delay, the second is a number that increase the precision of the color changes which impacts the speed, the third is how many pixels to skip over, and the forth is the number of LEDs in the strip. Next, we place a repeat while true loop block and call the function repeatedly. Power Considerations This program has the ability to drive every single pixel on the strip. This has the disadvantage that it will drain batteries too quickly or exceed the power levels of a USB power supply. To get around this you can up the skip parameter to only turn on every 2nd, 3rd or 4th pixel. The entire rainbow cycle loop takes a few seconds to run, so be aware of this limitation if you are adding controls or interrupts. Wheel Function The rainbox function makes a call to the wheel function that was created in a previous lesson. Main Blocks Here are the main blocks that call the functions. Make sure to change the NUMBER_PIXELS parameter to match the length of your LED strip.","title":"Rainbow Cycle"},{"location":"lessons/11-rainbow-cycle/#rainbow-cycle","text":"In this lesson we will use the wheel function to slowly cycle each pixel in a range through each of the colors of the rainbow.","title":"Rainbow Cycle"},{"location":"lessons/11-rainbow-cycle/#the-rainbow-cycle-function","text":"We create a function called rainbow_cycle() that has four parameters. The first is a delay, the second is a number that increase the precision of the color changes which impacts the speed, the third is how many pixels to skip over, and the forth is the number of LEDs in the strip. Next, we place a repeat while true loop block and call the function repeatedly.","title":"The Rainbow Cycle Function"},{"location":"lessons/11-rainbow-cycle/#power-considerations","text":"This program has the ability to drive every single pixel on the strip. This has the disadvantage that it will drain batteries too quickly or exceed the power levels of a USB power supply. To get around this you can up the skip parameter to only turn on every 2nd, 3rd or 4th pixel. The entire rainbow cycle loop takes a few seconds to run, so be aware of this limitation if you are adding controls or interrupts.","title":"Power Considerations"},{"location":"lessons/11-rainbow-cycle/#wheel-function","text":"The rainbox function makes a call to the wheel function that was created in a previous lesson.","title":"Wheel Function"},{"location":"lessons/11-rainbow-cycle/#main-blocks","text":"Here are the main blocks that call the functions. Make sure to change the NUMBER_PIXELS parameter to match the length of your LED strip.","title":"Main Blocks"},{"location":"lessons/15-random/","text":"Random Drawing In this lesson we will introduce the ability to draw random colors at random pixels. This allows us to create more natural patterns such as the flicking light of a candle. The Random Block We need a block that will generate a random integer between a range of values. This is called the random integer block in the Math navigation menu and it takes two parameters. In our case, we can just pass in the minimum and maximum values: You can read more about MicroPython random functions here We will be using the wheel() function that we used earlier: Wheel Function Main Blocks Exercises Instead of updating a single pixel in consecutive sequences, can you also use the random integer block to update a random pixel? What if you have a small fixed list of colors to pick from. How can you use random integer block to pick a color from this list?","title":"Random"},{"location":"lessons/15-random/#random-drawing","text":"In this lesson we will introduce the ability to draw random colors at random pixels. This allows us to create more natural patterns such as the flicking light of a candle.","title":"Random Drawing"},{"location":"lessons/15-random/#the-random-block","text":"We need a block that will generate a random integer between a range of values. This is called the random integer block in the Math navigation menu and it takes two parameters. In our case, we can just pass in the minimum and maximum values: You can read more about MicroPython random functions here We will be using the wheel() function that we used earlier:","title":"The Random Block"},{"location":"lessons/15-random/#wheel-function","text":"","title":"Wheel Function"},{"location":"lessons/15-random/#main-blocks","text":"","title":"Main Blocks"},{"location":"lessons/15-random/#exercises","text":"Instead of updating a single pixel in consecutive sequences, can you also use the random integer block to update a random pixel? What if you have a small fixed list of colors to pick from. How can you use random integer block to pick a color from this list?","title":"Exercises"},{"location":"lessons/16-candle/","text":"Candle Flicker In this lesson we will try to simulate the behavior of a flickering candle using the randint() function. To do this we will need a function that generates a mostly yellow-orange color, but the actual color and and brightness will vary. This will give the impression of a candle flame with a flicker. A pure yellow color has both the red and green values on and the blue value off: 1 2 yellow = ( 255 , 255 , 0 ) orange = ( 255 , 150 , 0 ) Our goal is to generate variations in both color and brightness. We can do this by starteding out with a green that varies from 50 to 200 and a red that varies above this value by 25 to 50. Sample Candle Function Our function will draw the new value on a random location on the LED strip. It will take a single parameter of the delay on how often the values are updated, typically about 1/100th of a second. Main Demonstration Blocks","title":"Candle Flicker"},{"location":"lessons/16-candle/#candle-flicker","text":"In this lesson we will try to simulate the behavior of a flickering candle using the randint() function. To do this we will need a function that generates a mostly yellow-orange color, but the actual color and and brightness will vary. This will give the impression of a candle flame with a flicker. A pure yellow color has both the red and green values on and the blue value off: 1 2 yellow = ( 255 , 255 , 0 ) orange = ( 255 , 150 , 0 ) Our goal is to generate variations in both color and brightness. We can do this by starteding out with a green that varies from 50 to 200 and a red that varies above this value by 25 to 50.","title":"Candle Flicker"},{"location":"lessons/16-candle/#sample-candle-function","text":"Our function will draw the new value on a random location on the LED strip. It will take a single parameter of the delay on how often the values are updated, typically about 1/100th of a second.","title":"Sample Candle Function"},{"location":"lessons/16-candle/#main-demonstration-blocks","text":"","title":"Main Demonstration Blocks"},{"location":"lessons/17-theater-chase/","text":"Theater Chase Theater Chase is a classic pattern that was popularized in marquee signs above movie theaters. It consists of a row of lights that were usually switched on and off so it would appear that the lights were moving or being chased around the edge of the signs. Sample Theater Chase Function To create the illusion of pixels moving along a strip, we need to have three nested loops: The inner \"i\" loop just moves from 0 to the number of pixels in steps of 3 (or a similarly small number). It turns every 3rd pixel on, waits and then turns it off The middle \"j\" loop just offsets the starting point of the inner loop moving from values of 0, 1 and 2. The index in the inner loop is i+j . The outer-most loop just indicates how many times the pattern should be repeated Here is a sample of the theater_chase function that has four parameters: the color the delay (about 50 milliseconds) the number of times the pattern should be repeated (iterations) If you want to lower the power of the LED strip, you can change the skip number in the inner loop from 3 to 4, 5 or 6 etc. Main set of Blocks This set of blocks will run a theater chase for the seven colors of the rainbow and then repeat. Exercises Add the skip number as an additional parameter to the function Add another parameter that reversed the direction of the movement Create a function that randomly changes the direction every few seconds","title":"Theater Chase"},{"location":"lessons/17-theater-chase/#theater-chase","text":"Theater Chase is a classic pattern that was popularized in marquee signs above movie theaters. It consists of a row of lights that were usually switched on and off so it would appear that the lights were moving or being chased around the edge of the signs.","title":"Theater Chase"},{"location":"lessons/17-theater-chase/#sample-theater-chase-function","text":"To create the illusion of pixels moving along a strip, we need to have three nested loops: The inner \"i\" loop just moves from 0 to the number of pixels in steps of 3 (or a similarly small number). It turns every 3rd pixel on, waits and then turns it off The middle \"j\" loop just offsets the starting point of the inner loop moving from values of 0, 1 and 2. The index in the inner loop is i+j . The outer-most loop just indicates how many times the pattern should be repeated Here is a sample of the theater_chase function that has four parameters: the color the delay (about 50 milliseconds) the number of times the pattern should be repeated (iterations) If you want to lower the power of the LED strip, you can change the skip number in the inner loop from 3 to 4, 5 or 6 etc.","title":"Sample Theater Chase Function"},{"location":"lessons/17-theater-chase/#main-set-of-blocks","text":"This set of blocks will run a theater chase for the seven colors of the rainbow and then repeat.","title":"Main set of Blocks"},{"location":"lessons/17-theater-chase/#exercises","text":"Add the skip number as an additional parameter to the function Add another parameter that reversed the direction of the movement Create a function that randomly changes the direction every few seconds","title":"Exercises"},{"location":"lessons/18-ripple/","text":"Ripple Patterns Exercises Make the color random Make the size of the ripple random Add randomness to the delay Use the wheel function to pick a random color Make the pixel intensity get lower as the ripple expands","title":"Ripple"},{"location":"lessons/18-ripple/#ripple-patterns","text":"","title":"Ripple Patterns"},{"location":"lessons/18-ripple/#exercises","text":"Make the color random Make the size of the ripple random Add randomness to the delay Use the wheel function to pick a random color Make the pixel intensity get lower as the ripple expands","title":"Exercises"},{"location":"lessons/19-larson-scanner/","text":"Larson Scanner The Larson Scanner is a light pattern special effect named after Glen A. Larson . Larson used this pattern to give his Battlestar Galactica Cylon and KITT robot eyes a sense of sentience. See Knight Rider for the backstory. Description A set of usually red pixels moves back and forth over the LED strip. The pixels are brighter in the center and are dimmer at the edges of the set. You can see an example of this in the Larson Scanner Pumpkin Kit Color RGB values We will need a set of predefined colors for various brightness of red: Note that the color levels are not linear. You can adjust these and add more intermediate levels for wider patterns. Full Set of Blocks Exercises Add a color parameter Add a parameter for the width of the pattern","title":"Larson Scanner"},{"location":"lessons/19-larson-scanner/#larson-scanner","text":"The Larson Scanner is a light pattern special effect named after Glen A. Larson . Larson used this pattern to give his Battlestar Galactica Cylon and KITT robot eyes a sense of sentience. See Knight Rider for the backstory.","title":"Larson Scanner"},{"location":"lessons/19-larson-scanner/#description","text":"A set of usually red pixels moves back and forth over the LED strip. The pixels are brighter in the center and are dimmer at the edges of the set. You can see an example of this in the Larson Scanner Pumpkin Kit","title":"Description"},{"location":"lessons/19-larson-scanner/#color-rgb-values","text":"We will need a set of predefined colors for various brightness of red: Note that the color levels are not linear. You can adjust these and add more intermediate levels for wider patterns.","title":"Color RGB values"},{"location":"lessons/19-larson-scanner/#full-set-of-blocks","text":"","title":"Full Set of Blocks"},{"location":"lessons/19-larson-scanner/#exercises","text":"Add a color parameter Add a parameter for the width of the pattern","title":"Exercises"}]}